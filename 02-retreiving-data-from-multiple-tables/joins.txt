
///////////////////////////////////////////////////////////
=========================INNER JOINS===================
we have only selected columns from a single table. but in real world we often select columns from multiple tables.
in orders table we have a column called customer_id. this actually contains the identity of a customer who has placed the order. we are not storing the full customers addres in it. 

in SQL there are two types of JOINs
1- inner JOIN
2- outer JOIN

in INNER JOIN the INNER keyword is actually optional. 

SELECT *
FROM orders
JOIN customers
        ON condition(orders.customer_id = customers.customer_id)

-> selecting only orderid, firstname, lastname, customerid

SELECT order_id, orders.customer_id, first_name, last_name
FROM orders
JOIN customers ON customers.customer_id = orders.customer_id

// here we are repeating the words like orders, customers
// alias their names

SELECT order_id, o.customer_id, first_name, last_name
FROM orders o
JOIN customers c
	ON c.customer_id = o.customer_id

=== -> -> Exercise
Join tho order_items table with product table such that each table shows the product_id as well as its name followed by the quantity and unit price from the order_items table

SELECT  order_id, p.product_id, name, quantity, oi.unit_price
FROM order_items oi
JOIN products p 
	ON oi.product_id = p.product_id



///////////////////////////////////////////////////////////
==================Joining Across Databases ==============
now lets we have products table in saperate database like sql_inventory. we have to get the products table from sql_inventory like sql_inventory.products

SELECT  *
FROM order_items oi
JOIN sql_inventory.products p 
	ON oi.product_id = p.product_id



///////////////////////////////////////////////////////////
==================Self Joinig  ============================

in SQL we can join a table with itself

-> all employes with the manager to whome they are reports to
USE sql_hr;
SELECT *
FROM employees e
JOIN employees m
	ON e.reports_to = m.employee_id


USE sql_hr;
SELECT 
	e.first_name,
    e.last_name,
    m.first_name AS Manager
FROM employees e
JOIN employees m
	ON e.reports_to = m.employee_id


///////////////////////////////////////////////////////////
==================Joinig Multiple Tables =================

-> orders, order_statusses, customers tables are joined

SELECT * FROM sql_store.orders;
SELECT 
	o.order_id,
    o.order_date,
    c.first_name,
    c.last_name,
    os.name AS Status
FROM orders o
JOIN customers c
	ON o.customer_id = c.customer_id
JOIN order_statuses os
	ON o.status = os.order_status_id


=== -> -> Exercise
from sql_invoicing database  Join clients, payment_methods and payments tables

USE sql_invoicing;

SELECT 
	p.date AS Payment_Date,
    p.amount AS Payment_Amount,
    pm.name AS Payment_Method,
    c.name AS Client_Name
FROM payments p
JOIN clients c
	ON c.client_id = p.client_id
JOIN payment_methods pm
	ON p.payment_method = pm.payment_method_id
JOIN invoices i
	ON p.invoice_id = i.invoice_id


///////////////////////////////////////////////////////////
==================Compound Join Condition =================
so far we have used a single column for uniquely identifier for athe rows of a given table.
in order_items table we have different columns like order_id, product_id and so on. each column has some repeated values. we can not uniquely identify the each row. for this purpose we use combination of values of both the columns for uniquely identify the each order item. composite primary key contained more than one column.

USE sql_store;
SELECT *
FROM order_items oi
JOIN order_item_notes oin 
	ON oi.order_id = oin.order_Id
    AND oi.product_id = oin.product_id



///////////////////////////////////////////////////////////
==================Implicit Join Syntax =================