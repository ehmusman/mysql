///////////////////////////////////////////////////////////
=========================SELECT Clause=====================

this clause is used to select diiferent columns from a table after selecting a database

USE sql_store;
SELECT first_name, last_name, points, points*10 AS new_poins
FROM customers
WHERE customer_id = 1


-> Select distinct state
USE sql_store;
SELECT DISTINCT state
FROM customers


===->   Exercise
Return all products with three columns
-- name, --unit price, --new price = unit price * 1.1

SELECT name, unit_price, unit_price*1.1 AS 'New Price'
FROM products

///////////////////////////////////////////////////////////
=========================WHERE Clause=====================
this clause is used for filtering
some comparison operatorss are,
greater than,  >
gretaer than or equal to, >=
less than, <
less than or equal to , <=
equal to , =
not equal to , !=  or <>


SELECT * 
FROM customers
WHERE points > 3000

===->   Exercise
Get Orders Placed this year
SELECT *
FROM orders
WHERE order_date >= '2018-01-01'


-> the AND , OR, NOT operators

SELECT *
FROM customers
WHERE birth_date >= '1990-01-01' AND points > 2000

SELECT *
FROM customers
WHERE birth_date >= '1990-01-01' OR points > 2000

===->   Exercise
from order_item table, get the items
1- for order number 6
2- where the total price is greater than 30

SELECT order_id, quantity, unit_price, unit_price*quantity AS total_price
FROM order_items
WHERE order_id = 6  AND unit_price*quantity > 30


///////////////////////////////////////////////////////////
=========================The IN Operator===================

SELECT *
FROM customers
-- WHERE state="va" OR state="ga" OR state="fl"
WHERE state IN("va", "ga", "fl")

===->   Exercise
Return products with 
quantity is stock equal to 49, 38, 72

SELECT *
FROM products
WHERE quantity_in_stock IN(49, 38, 72)


///////////////////////////////////////////////////////////
=========================The BETWEEN Operator===================

SELECT *
FROM customers
-- WHERE points >= 1000 AND points<= 3000
WHERE points BETWEEN 1000 AND 3000


===->   Exercise
return customers born
between 1/1/1990 and 1/1/2000

SELECT * 
FROM customers
WHERE birth_date BETWEEN '1990-01-01' AND '2000-02-02'



///////////////////////////////////////////////////////////
=========================The LIKE Operator===================
SELECT *
FROM customers
WHERE last_name LIKE "b%"
// last name starts with b. anything can come after b

WHERE last_name LIKE "%b" // last name ends with b
WHERE last_name LIKE "%b%" // b can be any where in the last name


SELECT *
FROM customers
WHERE last_name LIKE "b____y"
// where last name should have 6 characters and starts with b and ends with y



===->   Exercise
get the customers whose
1- whose address contain TRAIL or AVENUE
2- phone numbe ends with 9

1- solution
SELECT * 
FROM customers
WHERE address LIKE "%trail%" OR address LIKE "%avenue%"

2- solution
SELECT * 
FROM customers
WHERE phone LIKE "%9"



///////////////////////////////////////////////////////////
=========================The REGEXP Operator===================
SELECT *
FROM customers
where last_name REGEXP "field" // it works same as 
where last_name LIKE "%field%"

^  -> begins with  REGEXP "^field"
$  -> ends with  REGEXP "field$"
|  -> like logical or operator
        REGEXP "field|mac"
[]  ->  REGEXP "[gim]e" the latter before e should be g/i/m
[]  ->  REGEXP "e[gim]" the latter after e should be g/i/m
[]  ->  REGEXP "e[a-h]" the latter after e should be a,b,c,d,e,f,g,h
[-] -> - represents the range


===->   Exercise
Get the customers whose
1- first names are ELKA or AMBUR
2- last name ends with EY or ON
3- last name starts with MY or contain SE
4- last name contain B followed by R or U

1- solution
SELECT * 
FROM customers
WHERE first_name REGEXP "elka|ambur"

2- solution
SELECT * 
FROM customers
WHERE last_name  REGEXP "ey$|on$"

3- solution
SELECT * 
FROM customers
WHERE last_name  REGEXP "^my|se"

4- solution
SELECT * 
FROM customers
WHERE last_name  REGEXP "b[ru]"
or 
WHERE last_name  REGEXP "br|bu"


///////////////////////////////////////////////////////////
=========================The IS NULL Operator===================

SELECT * 
FROM customers
WHERE phone IS NULL


===->   Exercise
select all the orders that are not shipped yet

SELECT * 
FROM orders
WHERE shipper_id IS NULL


///////////////////////////////////////////////////////////
=========================The ORDER BY clause===============
-> order by customerid in descending order
SELECT *
FROM customers
ORDER BY customer_id

-> order by firstname in descending order
SELECT *
FROM customers
ORDER BY first_name


-> order by firstname in descending order
SELECT *
FROM customers
ORDER BY first_name DESC

===->   Exercise
select all the items for order with id = 2
and sort them by their total price in descending order
SELECT *, quantity * unit_price AS total_price
FROM order_items
WHERE order_id = 2
ORDER BY total_price DESC




///////////////////////////////////////////////////////////
=========================The LIMIT clause===================
used for pagination
Limit 3 // will return first 3 from result
SELECT *
FROM customers
LIMIT 3

-> let 
page1 : 1-3
page2: 4-6
page3: 7-9

for page 2
SELECT *
FROM customers
LIMIT 3, 3

for page 1
SELECT *
FROM customers
LIMIT 0, 3

for page 3
SELECT *
FROM customers
LIMIT 6, 3


=== -> Exercise

Get top three loyal customers

solution 

SELECT * 
FROM customers
ORDER BY points DESC
LIMIT 3
